# shellcheck disable=SC2148,SC2128,SC2034,SC1091
HISTFILE="$HOME/.histfile"
HISTSIZE=4000
SAVEHIST=10000
bindkey -e

### Color palette array for easier colorization

# Permutations for forground and background
typeset -A per
per=(
  "fg_"  "38;2;"
  "bg_"  "48;2;"
)

typeset -A pal # Array of base colors for the pallet
pal=(
  "blue"  "10;117;173"        # #0A75AD
  "red"  "214;30;28"          # #D61E1C
  "pink"  "255;51;184"        # #FF33B8
  "purple"  "144;16;240"      # #9010F0
  "orange"  "226;109;14"      # #E26D0E
  "yellow"  "237;188;"        # #EDBC00
  "green"  "29;166;90"        # #1DA65A
  "white"  "245;251;255"      # #F5FBFF
  "light_grey"  "176;178;180" # #B0B2B4
  "dark_grey"  "79;77;75"     # #4F4D4B
  "black"  "10;4;"            # #0A0400
)
typeset -A col # add indicies for:
echo "=====DEBUG====="
for mut in "${(@k)per}"; do # assign the keys of [per] to $mut
    for color in "${(@k)pal}"; do # # assign the keys of [pal] to $color
        col[$mut$color]="\e[${per[$mut]}${pal[$color]}m" # index names follow the pattern ${col[<fg/bg>_<color>]}
    done
done
col[reset]="\e[0m" # Index for ANSI reset sequence

#for key value in ${(kv)col}; do # Debug: Color Array
#    echo -E "$key -> $value"
#done

echo "=====DEBUG====="

# Color banner
read -rd '' col_banner << MOTD_EOF
\e[1A
           ${col[fg_blue]}dt
          I@@w       ${col[fg_pink]}Starship Prompt
         ${col[fg_blue]}r@@@@l                ${col[fg_light_grey]}using
        ${col[fg_blue]}f#@@@@#b    ${col[fg_orange]}<Name TBD> ${col[fg_light_grey]}theme
     ${col[fg_blue]},%gg@@@@@@0}m,   ${col[fg_light_grey]}by ${col[fg_yellow]}@TomIO#2000
   ${col[fg_blue]}yPwZ/@@@@@@@@Âµ&oPa
 ;O0Â´  Q@@@@@@@@$  \`r6.
(QÂ°   .@@@@@@@@@@;   \`0,
Gj    G@@@@@@@@@@Q    kD
Q    ,@@@@@@%^}@@@;   ;g
Vy   A@@@@QÂ°   v@@0   q)
 uP.y@@@#%      v@@l dv
  ?o\$@@6%        k@8y'
    ##zEosyuyweaIuMQ
   Â´%Â°             m${col[reset]}\n
MOTD_EOF

### Environment setup
export PATH="$PATH:$HOME/.cargo/bin/" # amend the $PATH variable
export LS_COLORS='rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=00:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.avif=01;35:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.webp=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:*~=00;90:*#=00;90:*.bak=00;90:*.old=00;90:*.orig=00;90:*.part=00;90:*.rej=00;90:*.swp=00;90:*.tmp=00;90:*.dpkg-dist=00;90:*.dpkg-old=00;90:*.ucf-dist=00;90:*.ucf-new=00;90:*.ucf-old=00;90:*.rpmnew=00;90:*.rpmorig=00;90:*.rpmsave=00;90:' # set custom $LS_COLORS

# setup nvim as default EDITOR and DIFF program.
export EDITOR="nvim"
export DIFFPROG="nvim -d"

if [ -e /mnt/c/Users/Josh/Desktop/stuff/VScode/git/.dotfiles/dot_config/private_starship.toml ]; then # if this is my Personal PC, use the working copy of the prompt.
    export STARSHIP_CONFIG=/mnt/c/Users/Josh/Desktop/stuff/VScode/git/.dotfiles/dot_config/private_starship.toml
fi

# initilize starship prompt
eval "$(starship init zsh)" || \
echo "Error: failed to initialize starship prompt" && { # Print error message if starship failed to initilize, otherwise;
    ((${SHLVL:-0} <= 1)) && # if we're in a top level shell,
    [[ -z $ANDROID_ROOT ]] && # and not on Android/Termux,
    echo -ne "$col_banner" # print banner,
    echo "ðŸš€ Starship Prompt Initialized";} # and confirmation message

if [[ -n $SSH_AUTH_SOCK ]]; then # see if SSH Agent is running
    : # if it is, do nothing
else
    eval "$(ssh-agent)" >> /dev/null # startup the SSH Agent; discard confirmation message
    echo -ne "SSH Agent started\nPID: ${col[fg_dark_grey]}${col[bg_white]}$SSH_AGENT_PID${col[reset]}\n\r"
fi

alias ls='ls --color=auto' # colorize ls by default

set -o vi # enable vi mode


### Update checking
zsh_script_dir="$HOME/.config/zsh/scripts/" # script location
update_frequency=0 # interval between update checks (in days)

echo -e "Last checked for updates at: ${col[fg_blue]}$(date -r "$zsh_script_dir" +"%x %X" || echo "Unknown" )${col[reset]}"

if find "$zsh_script_dir" -maxdepth 0 -mtime +${update_frequency}; then # check the modification time of the script directory against the update frequency
( # Do this in a subshell so we don't have to clean up variables
    check_upstream() { # Based on https://stackoverflow.com/a/3278427
        UPSTREAM=${1:-'@{u}'}
        LOCAL=$(git rev-parse '@{0}')
        REMOTE=$(git rev-parse "$UPSTREAM")
        BASE=$(git merge-base '@{0}' "$UPSTREAM")

        if [ "$LOCAL" = "$REMOTE" ]; then
            echo -e "${col[fg_green]}${PWD##*\/}${col[reset]}] Up to date" # Remove all but the last part of the directory name, leaving the plugin name.
        elif [ "$LOCAL" = "$BASE" ]; then
            echo -e "[${col[fg_orange]}${PWD##*\/}${col[reset]}] New changes available"
            touch -cm . # Update the modification time of this plugin's folder.
            ### Prompt user for update. (I'll add this later)
        fi
    }

    # Doing a literal array assignment here is fine and much clearer.
    # https://www.shellcheck.net/wiki/SC2207
    # shellcheck disable=SC2207
    plugin_array=($(find "$zsh_script_dir" -mindepth 1 -maxdepth 1 -type d))

    for index in "${plugin_array[@]}"; do # loop over the array of plugins
        { cd "$index" && check_upstream ''; } || echo "An error occured while checking: $index"; continue
    done
touch -cm "$zsh_script_dir" # Update the script directories modification time.
)
fi



### Load "plug-in" scripts; explicitly.
source "$zsh_script_dir/zsh-autosuggestions/zsh-autosuggestions.zsh" # Load autosuggestions
source "$zsh_script_dir/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh" # Syntax highlighting; should be loaded last


### Variable clean up
unset -v col pal per # color scheme array and permutations
unset -v col_banner update_frequency zsh_script_dir # color banner, update frequency and, top directory for Zsh plugin scripts
