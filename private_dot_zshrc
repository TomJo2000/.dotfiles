#!/usr/bin/env zsh
# shellcheck shell=bash # Shellcheck doesn't officially support Zsh linting, Bash is a close enough analog in most cases.

# Comment styling
# ** Highlight
# ?? Informational
# !! Important
# ~~ Invalidated
# (TODO) Todo comments
# (WIP) Work in Progress
# (ACK) acknowledgment

### Change value to enable debug output from this script.
# Valid values:
# Disable debug -> off (default)
# Section specific -> color; updates; installed; missing; ssh;
# Everything -> all
debug_verbosity="off"

function main(){ # contains everything that only needs to run when setting up a un-nested shell

### **=====User settings=====**
local zsh_script_dir="$HOME/.config/zsh/scripts" # "plugin" script location
local update_frequency="7d" # ?? interval between update checks. Format: 1w2d3h4m5s (case insensitive); Default: 7d
### **=======================**

typeset -a wanted_plugins
wanted_plugins=( # List plugins you wish to use by repo URL
    "https://github.com/zsh-users/zsh-completions"
    "https://github.com/zsh-users/zsh-autosuggestions"
    "https://github.com/zsh-users/zsh-syntax-highlighting"
)

### Color palette array for easier colorization
typeset -A per
per=( # Permutations for foreground and background
    [fg_]="38;2;"
    [bg_]="48;2;"
)

typeset -A pal # Array of base colors for the pallet
pal=( #[name]="r ; g ; b "  # Color palette
       [blue]="10;117;173"  # #0A75AD
        [red]="214;30;28"   # #D61E1C
       [pink]="255;51;184"  # #FF33B8
     [purple]="144;16;240"  # #9010F0
     [orange]="226;109;14"  # #E26D0E
     [yellow]="237;188;"    # #EDBC00
      [green]="29;166;90"   # #1DA65A
      [white]="245;251;255" # #F5FBFF
 [light_grey]="176;178;180" # #B0B2B4
  [dark_grey]="79;77;75"    # #4F4D4B
      [black]="10;4;"       # #0A0400
)

typeset -A col
# ** We can't quote looping over array keys with Zsh's syntax here, otherwise the Tokenization for VSCode's Outliner doesn't comprehend it.
# shellcheck disable=SC2068,2296 # Shellcheck doesn't understand Zsh's method for looping over associative array keys.
for mut in ${(k)per[@]}; do # assign the keys of [per] to $mut
    for color in ${(k)pal[@]}; do # assign the keys of [pal] to $color
        col[$mut$color]="\e[${per[$mut]}${pal[$color]}m" # index names follow the pattern ${col[<fg/bg>_<color>]}
    done
done
col+=( # append the following sequences to the `col` array
     [reset]="\e[0m"  # reset all escape sequences
  [fg_reset]="\e[39m" # reset foreground only
  [bg_reset]="\e[49m" # reset background only
      [bold]="\e[1m"
       [dim]="\e[2m"  # dimmed color
    [no_dim]="\e[22m" # also resets bold
      [ital]="\e[3m"  # italic
   [no_ital]="\e[23m"
     [uline]="\e[4m"  # underline
  [no_uline]="\e[24m"
     [blink]="\e[5m"  # blinking text
  [no_blink]="\e[25m"
       [inv]="\e[7m"  # swapped foreground and background
    [no_inv]="\e[27m"
    [strike]="\e[9m"  # strikethrough
 [no_strike]="\e[29m"
)

case $debug_verbosity in ## Debug: Color Array
    "color"|"all")
    echo "${col[fg_purple]}[${col[reset]}=====${col[fg_purple]}DEBUG${col[reset]}=====${col[fg_purple]}]${col[reset]}"
    # ** We can't quote looping over array keys with Zsh's syntax here, otherwise the Tokenization for VSCode's Outliner doesn't comprehend it.
    # shellcheck disable=SC2068,2296 # Shellcheck doesn't understand Zsh's method for looping over associative array keys.
    ( # Put this in a subshell to avoid making $value a variable in the parent shell
        for key in ${(k)col[@]}; do
            value="${col[$key]}"
            echo -ne "$value$key ->${col[reset]}" # apply current escape sequence -> print current key -> reset sequence
            echo -E " $value" # print current escape sequence uninterpreted
        done
    )
    echo "${col[fg_purple]}[${col[reset]}=====${col[fg_purple]}DEBUG${col[reset]}=====${col[fg_purple]}]${col[reset]}";;
esac

# Color banner
local col_banner
read -rd '' col_banner << MOTD_EOF
\0              ${col[fg_blue]}dt
          I@@w       ${col[fg_pink]}Starship Prompt
         ${col[fg_blue]}r@@@@l                ${col[fg_light_grey]}using
        ${col[fg_blue]}f#@@@@#b    ${col[fg_orange]}<Name TBD> ${col[fg_light_grey]}theme
     ${col[fg_blue]},%gg@@@@@@0}m,   ${col[fg_light_grey]}by ${col[fg_yellow]}@TomIO#2000
   ${col[fg_blue]}yPwZ/@@@@@@@@Âµ&oPa
 ;O0Â´  Q@@@@@@@@$  \`r6.
(QÂ°   .@@@@@@@@@@;   \`0,
Gj    G@@@@@@@@@@Q    kD
Q    ,@@@@@@%^}@@@;   ;g
Vy   A@@@@QÂ°   v@@0   q)
 uP.y@@@#%      v@@l dv
  ?o\$@@6%        k@8y'
    ##zEosyuyweaIuMQ
   Â´%Â°             m${col[reset]}
MOTD_EOF
# Leading whitespace on the first line of the heredoc is ignored
# Prefixing a \0 (NULL) gets around this by making the whitespace, technically, not leading.
# while not actually printing a character to the output.

    [[ -z $ANDROID_ROOT ]] && echo -e "$col_banner" # test that we're not on Android/Termux.
    [[ -n $STARSHIP_SHELL ]] && echo "ðŸš€ Starship Prompt Initialized" # print confirmation message if starship successfully started

{ # See if we should be using the working tree versions of starship.toml and .zshrc
      if [[ -e /mnt/c/Users/Josh/Desktop/stuff/VScode/git/.dotfiles/dot_config/private_starship.toml ]]; then # if this is my personal PC, use the working copy of the prompt
            export STARSHIP_CONFIG="/mnt/c/Users/Josh/Desktop/stuff/VScode/git/.dotfiles/dot_config/private_starship.toml"
    elif [[ -e $HOME/git/.dotfiles/dot_config/private_starship.toml ]]; then # same check for my personal laptop
            export STARSHIP_CONFIG="$HOME/git/.dotfiles/dot_config/private_starship.toml"
    elif [[ -e /mnt/c/Users/PC/Desktop/VSCode/git/.dotfiles/dot_config/private_starship.toml ]]; then # same check but for my work laptop
            export STARSHIP_CONFIG="/mnt/c/Users/PC/Desktop/VSCode/git/.dotfiles/dot_config/private_starship.toml"
    fi
}

if [[ -n $SSH_AUTH_SOCK ]]; then # see if SSH Agent is running
    : # if it is, do nothing
else
    eval "$(ssh-agent)" >> /dev/null # startup the SSH Agent; discard confirmation message
    echo -e "SSH Agent started\nPID: ${col[fg_dark_grey]}${col[bg_white]}$SSH_AGENT_PID${col[reset]}"
fi

case $debug_verbosity in ## Debug: SSH
    "ssh"|"all")
    echo -e "$(ss -pl | grep -oP ".*\/ssh-.{12}\/agent\.[0-9]+" | wc -l) SSH agents running" || echo "Could not determine SSH Debug information"
    ;;
esac

### Update checking
typeset -a found_plugins # list of installed plugins
# shellcheck disable=SC2207 # We're taking care of this ourselves
found_plugins=($(find "$zsh_script_dir" -mindepth 1 -maxdepth 1 -type d))

    function updates(){ # Everything relating to Zsh plugin update checking.

        [[ ! -d $zsh_script_dir || ! -e $zsh_script_dir ]] && mkdir -p "$zsh_script_dir" # if script dir doesn't exist, make it.
        echo -e "Last checked for updates at: ${col[fg_blue]}$(date -r "$zsh_script_dir" +"%x %X" || echo "Unknown" )${col[reset]}"

        function parse_frequency(){ # Resolve $update_frequency from human readable form to seconds.

            local minute="60" # Seconds
            local hour="$((60 * minute))"
            local day="$((24 * hour))"
            local week="$((7 * day))"

                if [[ $update_frequency =~ ^0$ ]]; then
                    : # If the update frequency is a plain 0, no-op.
                elif [[ $update_frequency =~ ^([0-9]*[SsMmHhDdWw])*$ ]]; then
                    update_frequency=$(( $(sed -E "s/[Ww]/ \* $week + /;s/[Dd]/ \* $day + /;s/[Hh]/ \* $hour + /;s/[Mm]/ \* $minute + /;s/[Ss]//" <<< $update_frequency) + 0 )) # this fails without an operation on the sed output, so we just do + 0
                elif [[ $update_frequency =~ ^[0-9]*$ ]]; then
                    : # If the value is numeric, just use it as is (no-op)
                else # Fallthrough in case of invalid pattern
                    echo "${col[fg_orange]}Error:${col[reset]} Could not resolve value for ${col[fg_orange]}\$update_frequency=${col[reset]}\"$update_frequency\", defaulting to 1 Week"
                    update_frequency="$((1 * week ))"
                fi

                case $debug_verbosity in ## Debug: Updates - Always check for updates
                    "installed"|"updates"|"all")
                        update_frequency="0"
                        echo "${col[fg_purple]}DEBUG:${col[reset]} setting update frequency to $update_frequency days"
                    ;;
                esac
            return
            }; parse_frequency

        if (( EPOCHSECONDS - $(date -r "$zsh_script_dir" +%s) >= update_frequency )); then { # The difference of now and the last update has to be greater or equal to the update frequency
            check_upstream() { # (ACK) Based on https://stackoverflow.com/a/3278427
                local UPSTREAM; UPSTREAM='@{u}'
                local LOCAL   ; LOCAL=$(git rev-parse '@{0}')
                local REMOTE  ; REMOTE=$(git rev-parse "$UPSTREAM")
                local BASE    ; BASE=$(git merge-base '@{0}' "$UPSTREAM")

                if [ "$LOCAL" = "$REMOTE" ]; then
                    echo -e "[${col[fg_green]}${PWD##*\/}${col[reset]}] Up to date" # Remove all but the last part of the directory name, leaving the plugin name.
                elif [ "$LOCAL" = "$BASE" ]; then
                    echo -e "[${col[fg_orange]}${PWD##*\/}${col[reset]}] New changes available"
                    touch -cm . # Update the modification time of this plugin's folder.
                    ### (todo) Prompt user for update. (I'll add this later)
                fi
            return
            }

            for index in "${found_plugins[@]}"; do # loop over the array of plugins
                ( cd "$index" && check_upstream # Do update checking in a subshell to avoid having to cd back inside of the parent shell
                ) || echo "An error occurred while checking: $index"; continue
            done
        touch -cm "$zsh_script_dir" # Update the script directories modification time.
        }
        fi
    }; updates # Run the updates function, since we're done defining it.


### Evaluate missing plugins
case $debug_verbosity in ## Debug: Missing plugins
    "missing"|"updates"|"all")
        echo "${col[fg_purple]}DEBUG:${col[reset]} Adding some fake plugins for missing detection"
        wanted_plugins+=( # Add a couple fake missing plug-ins for debugging
        "https://127.0.0.1/fake_plugin/zsh-fake-plugin"
        "https://127.0.0.1/fake_plugin/zsh-not-a-real-plugin"
        "https://127.0.0.1/fake_plugin/zsh-also-not-a-real-plugin"
        "https://127.0.0.1/fake_plugin/zsh-get-real"
        "https://127.0.0.1/fake/zsh-fake-debug-plugins"
        ); ( # Then echo out the lists.
        echo -e "${col[fg_purple]}Wanted:${col[reset]}"
            for W in "${wanted_plugins[@]}"; do
                echo -e " ${col[fg_orange]}$W${col[reset]}"
            done
        echo -e "${col[fg_purple]}Found:${col[reset]}"
            for F in "${found_plugins[@]}"; do
                echo -e " ${col[fg_green]}$F${col[reset]}"
            done
        );;
esac

typeset -a diff # Missing plugin check, with guard clause to not run in nested shells.
diff=() # (ACK) Based on: https://stackoverflow.com/a/2315459
    for plugins in "${wanted_plugins[@]##*\/}"; do
        skip=''
        for found in "${found_plugins[@]##*\/}"; do
            [[ "$plugins" == "$found" ]] && { skip=1; break; }
        done
        [[ -n $skip ]] || diff+=("$plugins")
    done

for missing in "${diff[@]}"; do
    echo -e "[${col[fg_red]}$missing${col[reset]}] Missing"
done

unset -v found_plugins diff skip # Unset variables needed for missing script detection


### Completions

# zstyle ':completion:*:man:*' menu yes select # (WIP)

fpath+=("$zsh_script_dir/zsh-completions") 2> /dev/null # Zsh Completions does not get sourced, it gets appended to $fpath



### History Setup
export HISTFILE="$HOME/.histfile"
export HISTSIZE=4000
export SAVEHIST=10000

### Environment setup.
export PATH="$PATH:$HOME/.cargo/bin/" # amend the $PATH variable
export LS_COLORS='rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=00:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.avif=01;35:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.webp=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:*~=00;90:*#=00;90:*.bak=00;90:*.old=00;90:*.orig=00;90:*.part=00;90:*.rej=00;90:*.swp=00;90:*.tmp=00;90:*.dpkg-dist=00;90:*.dpkg-old=00;90:*.ucf-dist=00;90:*.ucf-new=00;90:*.ucf-old=00;90:*.rpmnew=00;90:*.rpmorig=00;90:*.rpmsave=00;90:' # set custom $LS_COLORS


# shellcheck disable=SC2155
{ ### less pager stylization
    export LESS_TERMCAP_mb=$(echo -e "${col[fg_red]}") # #D61E1C
    export LESS_TERMCAP_md=$(echo -e "${col[fg_blue]}") # #0A75AD
    export LESS_TERMCAP_me=$(echo -e "${col[reset]}")
    export LESS_TERMCAP_se=$(echo -e "${col[reset]}")
    export LESS_TERMCAP_so=$(echo -e "${col[fg_yellow]}") # #EDBC00
    export LESS_TERMCAP_ue=$(echo -e "${col[reset]}")
    export LESS_TERMCAP_us=$(echo -e "${col[uline]}${col[fg_green]}") # #1DA65A
}

# setup nvim as default EDITOR and DIFF program.
export EDITOR="nvim"
export DIFFPROG="nvim -d"

alias ls='ls --color=auto' # colorize ls by default

# (WIP) - SSH disconnect command keepalive
# noclose() { # Keep passed task running in background, even after SSH disconnection
#     (nohup "$@" &>/dev/null &)
# }

# (WIP)
# alias raw-input='sed -n l' # make the terminal print the raw input characters to the screen

### Load "plug-in" scripts; explicitly.
# shellcheck source=/dev/null # Ignore Shellcheck's inability to parse external sources by default
source "$zsh_script_dir/zsh-autosuggestions/zsh-autosuggestions.zsh" 2> /dev/null # Load autosuggestions

# shellcheck source=/dev/null # Ignore Shellcheck's inability to parse external sources by default
source "$zsh_script_dir/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh" 2> /dev/null # Syntax highlighting; should be loaded last
}


[[ $SHLVL == 1 || $debug_verbosity != 'off' ]] && main # Only run `main()` if we're in a un-nested shell, or debugging.


### initialize starship prompt, this needs to be done in every nested shell.
eval "$(starship init zsh)" || \
echo "Error: failed to initialize starship prompt"# Print error message if starship failed to initialize

### Cleanup of remaining variables.
unset -v "col[@] pal[@] per[@]" # colorscheme array, palette and permutations
unset -v "debug_verbosity"

# [============================Helpful resources============================]
# [ Hyperpolyglot.org's comparison of *NIX shell syntax                     ]
# [ https://hyperpolyglot.org/unix-shells                                   ]
# [                                                                         ]
# [ Dylan Araps' collection of pure Bash alternatives to external processes ]
# [ https://github.com/dylanaraps/pure-bash-bible                           ]
# [                                                                         ]
# [ Advanced Bash Scripting Guide                                           ]
# [ https://tldp.org/LDP/abs/html/index.html                                ]
# [                                                                         ]
# [ Shellscript Linter                                                      ]
# [ https://www.shellcheck.net/                                             ]
# [=========================================================================]
